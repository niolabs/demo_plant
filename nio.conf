# n.io project configuration
#
[user_defined]

# host and port to launch rest web server on
NIOHOST=0.0.0.0
NIOPORT=8181

# Path to project root, leave blank to auto detect - it will use the root
# specified when running the binary (passed with -r or --root)
PROJECT_ROOT=

INSTANCE_NAME=local
INSTANCE_ID=local

# Pubkeeper Client
PK_TOKEN=
PK_HOST=
PK_PORT=443
PK_SECURE=True
PK_CA_CHAIN=

# WebsocketBrew Variables
WS_HOST=
WS_PORT=443
WS_SECURE=True

# Pubkeeper Server
PKS_JWT_SECRET=
PKS_ADDR=
PKS_INTERFACE=
PKS_PORT=

# Redis
REDIS_HOST=127.0.0.1
REDIS_PORT=6379

# Mongo
MONGO_HOST=127.0.0.1
MONGO_PORT=27017

# ZMQ / ZMQBrew Variables
# your IP address that other nodes can reach you on
IP=127.0.0.1

DIAGNOSTIC_URL_PREFIX=https://api.nio.works/v1/diagnostic

[environment]

# Location of custom extensions for auto-discovery
#
#blocks=blocks
#components=niocore.components
#services=nio.service

[components]

# discoverable components that should be disabled from project
#
disabled=SNMPAgent


[service]

# specify block router class used by services
#
#block_router=nio.router.thread_pool_executor.ThreadedPoolExecutorRouter

# when launching nio, start auto-start services asynchronously
#
#async_start=true

# when starting a service, start blocks asynchronously
#
#blocks_async_start=false

# when stopping a service, stop blocks asynchronously
#
#blocks_async_stop=true

# clone signals when a block notifies to two blocks
#
#clone_signals=true

# block router verifies that objects processed by blocks are nio signals
#
#check_signal_type=true

# when using ThreadedPoolExecutorRouter max workers is the maximum number of
# threads that will run concurrently
#
#thread_pool_max_workers=50

# time to wait for a service's response when sending an IPC request
#
#ipc_request_time_to_live=2

# maximum time to give a service process to launch and configure
#
#configure_timeout=60

# interval at which to check if service is fully configured
# this setting allows not to wait for configure timeout to expire in case
# of failure by monitoring service at this defined interval
#
#configure_check_interval=1

# maximum time to give a service process to start
#
#start_timeout=10

# maximum time to give a service process to stop
#
#stop_timeout=10

# interval at which to check if service process has stopped on its own
#
#stop_check_interval=1

# maximum time to give a service to stop
#
#service_stop_timeout=5

# interval at which to check if parent process has terminated in which case
# service will terminate, 0 or less will disable this check while a positive
# number indicates how often this check is performed
#check_parent_timeout=0

# include router diagnostics
#
#router_diagnostics=true

# router diagnostics interval
#
#router_diagnostic_interval=3600


[discovery]
# when a block is not decorated with discoverable-like decorator,
# this will be its default discoverability
#block_default=True

# when a service is not decorated with discoverable-like decorator,
# this will be its default discoverability
#service_default=False

# when a component is not decorated with discoverable-like decorator,
# this will be its default discoverability
#component_default=False

# comma separated list of patterns for modules to exclude from block discovery
#
#block_module_exclusions=*.tests, *.tests.*

# comma separated list of patterns for modules to exclude from service discovery
#
#service_module_exclusions=*.tests, *.tests.*

[logging]

# dictionary of python logging configuration
#
conf=etc/logging.json

[providers]

# file provider python module
#
#type=niocore.configuration.providers.file.FileConfigurationProvider

# path to configuration file provider
#
#config_directory=etc

[pubkeeper_client]
# The JWT token issued to you by the pubkeeper server, used to authenticate
#
token=[[PK_TOKEN]]

# IP of the Pubkeeper Server
#
host=[[PK_HOST]]

# Port of the Pubkeeper Server
#
port=[[PK_PORT]]

# Certificate Authority Chain for Pubkeeper Server
# when using self assigned certificates,  Using this
# option will force secure to true
#
ca_chain=[[PK_CA_CHAIN]]

# Assume wss, for secure connection to pubkeeper server
#
secure=[[PK_SECURE]]

# Validate certificate.  Useful for testing self-assigned
# certificates without a ca_chain.
#
#validate=True

# Interval to keep heartbeat on the websocket channel.  After 3 failed intervals
# the server will close the connection (default: 10)
#
#websocket_ping_interval=10

# List of all the brews you wish to use with the system
# should be a comma separated list of the classes
#
brews=pubkeeper.brew.local.brew.LocalBrew, pubkeeper.brew.websocket.brew.WebsocketBrew

[pubkeeper_server]
# Specifies whether this nio instance launches its own Pubkeeper Server
#
#standalone=False
# JWT Secret.  Used to validate tokens clients give to authenticate
#
jwt_secret=[[PKS_JWT_SECRET]]

# Static address to use (default: 127.0.0.1)
#
ip_address=[[PKS_ADDR]]

# Interface, auto-detect the address of the provided interface
# and use it as the address to bind to.  This is used only if
# the PKS_ADDR (ip_address) is not set (default: lo0)
#
interface=[[PKS_INTERFACE]]

# Port to run the server on (default: 9898)
#
port=[[PKS_PORT]]

# Maximum time to wait in seconds for Pubkeeper Server to start (note: relevant
# ony when in standalone mode)
#connect_timeout=2
# Interval to keep heartbeat on the websocket channel.  After 3 failed intervals
# the server will close the connection (default: 10)
#
#websocket_ping_interval=10

[pubkeeper.brew.local.brew.LocalBrew]
# use localhost rather than unix domain socket
#
# use_localhost=False

[pubkeeper.brew.websocket.brew.WebsocketBrew]
# hostname/ip of the Websocket Server
#
ws_host=[[WS_HOST]]

# port of the Websocket Server
#
ws_port=[[WS_PORT]]

# Should we maintain a wss connection to websocket server
#
ws_secure=[[WS_SECURE]]

[pubkeeper.brew.zmq.brew.ZMQBrew]
# your public ip address that the master broker can talk to you on
#
ip_address=[[IP]]

# minimum port value that a new publisher can be assigned to
#
publisher_min_port=9010

# maximum port value that a new publisher can be assigned to
#
publisher_max_port=9199

# linger period determines how long pending messages which have yet to be sent to a peer shall linger in memory after a socket is disconnected
#
#linger=1000

# high water mark is a hard limit on the maximum number of outstanding messages ZMQ shall queue in memory
#
#hwm_size=100000

# sets the maximum number of sockets allowed on the context
#
#max_sockets=1023

# size of the ZMQ thread pool to handle I/O operations. If your application is using only the inproc transport for messaging you may set this to zero, otherwise set it to at least one.
#
#max_io_thread_count=1

[persistence]

# directory to store core persistence files, which includes blocks, services
# plus any other data persisted through components
#configuration_data=etc/core_persistence

# directory to store service persistence files
#
#data=etc/services_persistence

# redis host ip address to connect to
redis_host=[[REDIS_HOST]]

# redis port to connect to
redis_port=[[REDIS_PORT]]

# redis key for core persistence
redis_core_id=[[INSTANCE_ID]]

# redis key for service persistence
redis_services_id=[[INSTANCE_ID]]

[scheduler]
# minimum amount of time allowed for a scheduled job
#
#min_interval=0.1

# interval at which the scheduler will check for jobs to be run
#
#resolution=0.1

[security]

# json configuration that defines users and their passwords - can point to a conf file
#
#users=etc/users.json

# json configuration that maps users to permissions - can point to a conf file
#
#permissions=etc/permissions.json
#

# JWT Key for cloud instances
#
jwt_key_b64=[[ JWT_KEY_64 ]]

# [security.oauth]
#
## json configuration that maps users to permissions - can point to a conf file
##
##permissions=etc/permissions.json
#
## identify client that is making responses - used to get an access token
##
##client_id=407408718192.apps.googleusercontent.com
#
## url for validating access token
##
##validate_url=https=/www.googleapis.com/oauth2/v2/tokeninfo?access_token=%s

[web]

# web server max thread pool size
#
#server_thread_pool=50

# include error traceback when reporting failed requests
#
#request_show_tracebacks=false

# cors allow origin
#
#cors_allow_origin=*

[management_publisher]

# pubsub topic to publish on
#
#topic=management

# specifies if INSTANCE_ID is appended to the topic
#
#add_instance_id=true

[diagnostic]
# Location of the diagnostic API
#
#api_url_prefix=https://api.nio.works/v1/diagnostic
api_url_prefix=[[DIAGNOSTIC_URL_PREFIX]]

# report service diagnostics?
#
#service=true

# report signals diagnostics?
#
#signals=true

# enable a failure queue
#
#failure_queue=true

# size of the failure queue in messages queued
#
#failure_queue_len=10000

# specifies if INSTANCE_ID is appended to the topic specified in management_publisher
#
#add_instance_id=true

[rest]

# settings for the web server that will host the core REST API
#

# host and port to launch rest web server on
#
port=[[NIOPORT]]
host=[[NIOHOST]]

# if configured host is unavailable, interval at which network availability is checked and web server restarted
#
#network_retry_interval=30

# path to ssl certificate files
#
ssl_certificate:
ssl_private_key:
# optional certificate chain
ssl_certificate_chain:

[service_monitor]

# interval (in seconds) to check on services in "started"
#
#healthy_monitor_interval=30

# interval (in seconds) to check on services in "error"
#
#failed_monitor_interval=60

# interval (in seconds) to wait before restarting a service when service cannot be reached
# < 0 ==> restart is disabled
#  0  ==> restart upon error detection
# > 0 ==> interval to wait while service is unreachable before restarting it
#restart_service_interval=-1

[snmp]

# host and port to launch snmp agent on
#
#host=127.0.0.1
#port=161

# community security name and agent name mapping
#
#community_index=agent
#community_name=public

# host and port to launch snmp trap server on
#
#trap_host=127.0.0.1
#trap_port=162

# community agent name for traps
#
#trap_community_index=agent

# comma separated list of services to register status change traps for
#
#status_traps=error
